export interface GeminiImageRequest {
  prompt: string;
  aspectRatio?: string;
  model?: string;
}

export interface GeminiImageResponse {
  imageUrl: string;
  error?: string;
}

const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-001:generateImage';

export async function generateImage(request: GeminiImageRequest, apiKey: string): Promise<GeminiImageResponse> {
  try {
    const response = await fetch(`${GEMINI_API_URL}?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: request.prompt,
        generationConfig: {
          aspectRatio: request.aspectRatio || '16:10',
          negativePrompt: 'blurry, low quality, distorted',
          safetyFilterLevel: 'BLOCK_ONLY_HIGH',
          personGeneration: 'ALLOW_ADULT'
        }
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`Gemini API error: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    
    if (!data.generatedImages || data.generatedImages.length === 0) {
      throw new Error('No images generated by Gemini API');
    }

    return {
      imageUrl: `data:image/jpeg;base64,${data.generatedImages[0].bytesBase64Encoded}`
    };
  } catch (error) {
    console.error('Gemini API Error:', error);
    return {
      imageUrl: '',
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    };
  }
}

export async function editImage(
  baseImageData: string, 
  prompt: string, 
  apiKey: string
): Promise<GeminiImageResponse> {
  try {
    const response = await fetch(`${GEMINI_API_URL}?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: prompt,
        generationConfig: {
          aspectRatio: '16:10',
          negativePrompt: 'blurry, low quality, distorted',
          safetyFilterLevel: 'BLOCK_ONLY_HIGH',
          personGeneration: 'ALLOW_ADULT'
        },
        sourceImage: {
          imageBytes: baseImageData.split(',')[1] // Remove data:image/jpeg;base64, prefix
        }
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`Gemini API error: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    
    if (!data.generatedImages || data.generatedImages.length === 0) {
      throw new Error('No images generated by Gemini API');
    }

    return {
      imageUrl: `data:image/jpeg;base64,${data.generatedImages[0].bytesBase64Encoded}`
    };
  } catch (error) {
    console.error('Gemini Image Edit Error:', error);
    return {
      imageUrl: '',
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    };
  }
}